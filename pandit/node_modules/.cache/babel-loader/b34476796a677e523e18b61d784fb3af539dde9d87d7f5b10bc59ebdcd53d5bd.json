{"ast":null,"code":"import axios from 'axios';\n\n// Base API instance\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\n\n// Add a request interceptor to attach token automatically\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token'); // Assuming token stored in localStorage after login\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const signup = userData => API.post('/users/add', userData);\nexport const login = userData => API.post('/users/login', userData);\nexport const createBooking = bookingData => API.post('/bookings/create', bookingData);\nexport const getBookings = () => API.get('/bookings/view');\nexport const getBookingById = id => API.get(`/bookings/${id}`);\nexport const cancelBooking = id => API.delete(`/bookings/${id}`);\nexport const getServices = () => API.get('/services'); // Adjust route if needed\n\n// ==================== Notifications ====================\nexport const getNotifications = () => API.get('/notifications');\nexport const markNotificationAsRead = id => API.put(`/notifications/${id}`);\n\n// ==================== Payments ====================\nexport const createPayment = paymentData => API.post('/payments', paymentData);\nexport const getPayments = () => API.get('/payments');\n\n// ==================== Reviews ====================\nexport const createReview = reviewData => API.post('/reviews/submit', reviewData);\nexport const getReviews = () => API.get('/reviews/view');\nexport const deleteReview = id => API.delete(`/reviews/${id}`);","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","signup","userData","post","login","createBooking","bookingData","getBookings","get","getBookingById","id","cancelBooking","delete","getServices","getNotifications","markNotificationAsRead","put","createPayment","paymentData","getPayments","createReview","reviewData","getReviews","deleteReview"],"sources":["C:/Users/HP/OneDrive/Desktop/database/project/pandit-booking-frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base API instance\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n});\r\n\r\n// Add a request interceptor to attach token automatically\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token'); // Assuming token stored in localStorage after login\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport const signup = (userData) => API.post('/users/add', userData);\r\nexport const login = (userData) => API.post('/users/login', userData);\r\n\r\nexport const createBooking = (bookingData) => API.post('/bookings/create', bookingData);\r\nexport const getBookings = () => API.get('/bookings/view');\r\nexport const getBookingById = (id) => API.get(`/bookings/${id}`);\r\nexport const cancelBooking = (id) => API.delete(`/bookings/${id}`);\r\n\r\nexport const getServices = () => API.get('/services'); // Adjust route if needed\r\n\r\n// ==================== Notifications ====================\r\nexport const getNotifications = () => API.get('/notifications');\r\nexport const markNotificationAsRead = (id) => API.put(`/notifications/${id}`);\r\n\r\n// ==================== Payments ====================\r\nexport const createPayment = (paymentData) => API.post('/payments', paymentData);\r\nexport const getPayments = () => API.get('/payments');\r\n\r\n// ==================== Reviews ====================\r\nexport const createReview = (reviewData) => API.post('/reviews/submit', reviewData);\r\nexport const getReviews = () => API.get('/reviews/view');\r\nexport const deleteReview = (id) => API.delete(`/reviews/${id}`);\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGM,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMG,MAAM,GAAIC,QAAQ,IAAKhB,GAAG,CAACiB,IAAI,CAAC,YAAY,EAAED,QAAQ,CAAC;AACpE,OAAO,MAAME,KAAK,GAAIF,QAAQ,IAAKhB,GAAG,CAACiB,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;AAErE,OAAO,MAAMG,aAAa,GAAIC,WAAW,IAAKpB,GAAG,CAACiB,IAAI,CAAC,kBAAkB,EAAEG,WAAW,CAAC;AACvF,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAMrB,GAAG,CAACsB,GAAG,CAAC,gBAAgB,CAAC;AAC1D,OAAO,MAAMC,cAAc,GAAIC,EAAE,IAAKxB,GAAG,CAACsB,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;AAChE,OAAO,MAAMC,aAAa,GAAID,EAAE,IAAKxB,GAAG,CAAC0B,MAAM,CAAC,aAAaF,EAAE,EAAE,CAAC;AAElE,OAAO,MAAMG,WAAW,GAAGA,CAAA,KAAM3B,GAAG,CAACsB,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;;AAEvD;AACA,OAAO,MAAMM,gBAAgB,GAAGA,CAAA,KAAM5B,GAAG,CAACsB,GAAG,CAAC,gBAAgB,CAAC;AAC/D,OAAO,MAAMO,sBAAsB,GAAIL,EAAE,IAAKxB,GAAG,CAAC8B,GAAG,CAAC,kBAAkBN,EAAE,EAAE,CAAC;;AAE7E;AACA,OAAO,MAAMO,aAAa,GAAIC,WAAW,IAAKhC,GAAG,CAACiB,IAAI,CAAC,WAAW,EAAEe,WAAW,CAAC;AAChF,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAMjC,GAAG,CAACsB,GAAG,CAAC,WAAW,CAAC;;AAErD;AACA,OAAO,MAAMY,YAAY,GAAIC,UAAU,IAAKnC,GAAG,CAACiB,IAAI,CAAC,iBAAiB,EAAEkB,UAAU,CAAC;AACnF,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAMpC,GAAG,CAACsB,GAAG,CAAC,eAAe,CAAC;AACxD,OAAO,MAAMe,YAAY,GAAIb,EAAE,IAAKxB,GAAG,CAAC0B,MAAM,CAAC,YAAYF,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}